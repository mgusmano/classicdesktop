Ext.define("{appName}.view.main.west.WestView", {
	extend: "Ext.Panel",
	xtype: "westview",
	controller: "westview",
  cls: "westview",
  id: 'westview',
	layout: "fit",
	bind: { width: '\u007Bwestview_width}' },

	// This is like a normal config -- where the values are applied as the object is created --
	// but with a renderConfig, the values aren't applied until the component has been rendered.
	renderConfig: {
			//store: null,
			micro: false,
			name: null,
			selection: null
	},
	//twoWayBindable: ["selection"],

	// Each config property may have a corresponding update method. Ideally, the view should
	// be purely declarative, so these methods are an awkward exception. To minimize the code
	// in the view, just have these call a method in the controller. Another solution is to
	// put the update methods in a separate class, then mix in the class.
	updateStore: function(store) {
			Ext.refs.menuview.setStore(store);
	},
	updateMicro: function(micro) {
			this.getController().updateMicro(micro);
	},
	// updateName: function(name) {
	// 		this.getController().updateName(name);
	// },
	updateSelection: function(selection) {
			this.getController().updateSelection(selection);
	},

	tbar: {xtype: "topview",reference: "topview",dock: "top"},
	items: [{xtype: "menuview",reference: "menuview"}],
	bbar: {xtype: "bottomview",reference: "bottomview",height: 50}
});